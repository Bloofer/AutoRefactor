    private void makeNewIntroductionKorInitNote(User user) throws ResourceNotFoundException {

    	

		String[] resourceHashValues = new String[] { "4f966289091f00667f68d2b2a8a676179d06ed77",

				"6d6f9b8b0fa664b92d368af85c9a08b8b05f661e", "971271aad01ded9cb244f0aa58d3448677f6530d",

				"d926d5ce461bc8c6174c1ded2497c8b88141a846", "025711b07d0af0b4ea1393b3d534314d4f338838" };

        long[] resourceSizeValues = new long[] { 20723, 18899, 174042, 112105, 27009 };

        String folderName = "new_init_note_image/";



        InitNote initNote = initNoteMapper.selectInitNoteByLocale(InitNoteType.INTRODUCTION.getValue(), "KR");



        if (initNote != null) {



            // 노트 guid 생성

            String noteGuid = UUID.randomUUID().toString();



            // 각 이미지 리소스 패스 생성

            String imgTumbName = "1p_thumb.jpg";

            String img1Name = "1p_1.jpg";

            String img2Name = "1p_2.jpg";

            String img3Name = "1p_3.jpg";

            String img4Name = "1p_4.jpg";



            StringBuilder imgThumbPath = new StringBuilder();

            imgThumbPath.append(getAmazonResourcePath(noteGuid, user.getId()));

            imgThumbPath.append(imgTumbName);



            StringBuilder img1Path = new StringBuilder();

            img1Path.append(getAmazonResourcePath(noteGuid, user.getId()));

            img1Path.append(img1Name);

            

            StringBuilder img2Path = new StringBuilder();

            img2Path.append(getAmazonResourcePath(noteGuid, user.getId()));

            img2Path.append(img2Name);

            

            StringBuilder img3Path = new StringBuilder();

            img3Path.append(getAmazonResourcePath(noteGuid, user.getId()));

            img3Path.append(img3Name);

            

            StringBuilder img4Path = new StringBuilder();

            img4Path.append(getAmazonResourcePath(noteGuid, user.getId()));

            img4Path.append(img4Name);



            // 노트 생성

            long afterUSN = synoIndexService.getAfterUSN(user.getId(), EntryType.NOTE_UPDATE.getType());



            Note note = new Note();

            note.setGuid(noteGuid);

            note.setUserId(user.getId());

            note.setTitle(initNote.getTitle());

            note.setUpdateSequenceNumber(afterUSN);



            int affectedRow = noteMapper.insertNote(note);



            if (affectedRow > 0) {



                DateFormat sdf = new SimpleDateFormat(DEF_FORMAT_BY_YYYYMM);

                String dateGroup = sdf.format(new Date());



                NoteAttribute noteAttribute = new NoteAttribute();

                noteAttribute.setNoteId(note.getId());

                noteAttribute.setSummaryBody(initNote.getSummaryBody());

                noteAttribute.setAttachCount(4);

                noteAttribute.setInlineTagCount(0);

                noteAttribute.setTagCount(1);

                noteAttribute.setLatitude(0);

                noteAttribute.setLongitude(0);

                noteAttribute.setUpdateDevice(1);

                noteAttribute.setDateAlarm(null);

                noteAttribute.setAlarmComplete(false);

                noteAttribute.setDateGroup(dateGroup);

                noteAttribute.setType(NoteType.NORMAL.getValue());

                noteMapper.insertNoteAttribute(noteAttribute);



                // body 생성

                String bodyString = initNote.getBody();

                bodyString = bodyString.replace("${IMAGE_PATH1}", img1Path.toString());

                bodyString = bodyString.replace("${IMAGE_NAME1}", img1Name);

                

                bodyString = bodyString.replace("${IMAGE_PATH2}", img2Path.toString());

                bodyString = bodyString.replace("${IMAGE_NAME2}", img2Name);

                

                bodyString = bodyString.replace("${IMAGE_PATH3}", img3Path.toString());

                bodyString = bodyString.replace("${IMAGE_NAME3}", img3Name);

                

                bodyString = bodyString.replace("${IMAGE_PATH4}", img4Path.toString());

                bodyString = bodyString.replace("${IMAGE_NAME4}", img4Name);



                String bodyHash = CryptoUtil.hashStringToHexString(bodyString);

                long noteSize = bodyString.getBytes().length;



                NoteBody noteBody = new NoteBody();

                noteBody.setNoteId(note.getId());

                noteBody.setBodyHash(bodyHash);

                noteBody.setSize(noteSize);

                noteBody.setBody(bodyString);

                noteMapper.insertNoteBody(noteBody);



                NoteSearch noteSearch = new NoteSearch();

                noteSearch.setNoteGuid(noteGuid);

                noteSearch.setUserId(user.getId());

                noteSearch.setTitle(initNote.getTitle());

                noteSearch.setType(NoteSearchBatchType.ADD.getValue());

                noteSearch.setApply(false);

                noteSearchBatchMapper.insertNoteSearch(noteSearch);



                // 용량 업데이트

                userMapper.addUserUploadedByUserId(user.getId(), initNote.getSize());

            }



            // 썸네일

            afterUSN = synoIndexService.getAfterUSN(user.getId(), EntryType.RESOURCE_UPDATE.getType());



            Resource resource = new Resource();

            resource.setGuid(UUID.randomUUID().toString());

            resource.setNoteId(note.getId());

            resource.setHash(resourceHashValues[0]);

            resource.setSize(resourceSizeValues[0]);

            resource.setMime("image/jpeg");

            resource.setWidth(320);

            resource.setHeight(320);

            resource.setUpdateSequenceNumber(afterUSN);



            affectedRow = resourceMapper.insertResource(resource);



            if (affectedRow == 1) {



                ResourceAttribute resourceAttribute = new ResourceAttribute();

                resourceAttribute.setResourceId(resource.getId());

                resourceAttribute.setResourcePath(imgThumbPath.toString());

                resourceAttribute.setFileName(imgTumbName);

                resourceAttribute.setAttachment(false);

                resourceAttribute.setThumbnail(true);



                resourceMapper.insertResourceAttribute(resourceAttribute);



                // 용량 업데이트 (썸네일은 추가 안함)

                // userMapper.addUserUploadedByUserId(user.getId(), resourceSizeValues[0]);

            }



            // img 1

            afterUSN = synoIndexService.getAfterUSN(user.getId(), EntryType.RESOURCE_UPDATE.getType());



            Resource resource1 = new Resource();

            resource1.setGuid(UUID.randomUUID().toString());

            resource1.setNoteId(note.getId());

            resource1.setHash(resourceHashValues[1]);

            resource1.setSize(resourceSizeValues[1]);

            resource1.setMime("image/jpeg");

            resource1.setWidth(600);

            resource1.setHeight(300);

            resource1.setUpdateSequenceNumber(afterUSN);



            affectedRow = resourceMapper.insertResource(resource1);



            if (affectedRow == 1) {



                ResourceAttribute resourceAttribute = new ResourceAttribute();

                resourceAttribute.setResourceId(resource1.getId());

                resourceAttribute.setResourcePath(img1Path.toString());

                resourceAttribute.setFileName(img1Name);

                resourceAttribute.setAttachment(false);

                resourceAttribute.setThumbnail(false);



                resourceMapper.insertResourceAttribute(resourceAttribute);



                // 용량 업데이트

                userMapper.addUserUploadedByUserId(user.getId(), resourceSizeValues[1]);

            }

            

            // img 2

            afterUSN = synoIndexService.getAfterUSN(user.getId(), EntryType.RESOURCE_UPDATE.getType());



            Resource resource2 = new Resource();

            resource2.setGuid(UUID.randomUUID().toString());

            resource2.setNoteId(note.getId());

            resource2.setHash(resourceHashValues[2]);

            resource2.setSize(resourceSizeValues[2]);

            resource2.setMime("image/jpeg");

            resource2.setWidth(600);

            resource2.setHeight(500);

            resource2.setUpdateSequenceNumber(afterUSN);



            affectedRow = resourceMapper.insertResource(resource2);



            if (affectedRow == 1) {



                ResourceAttribute resourceAttribute = new ResourceAttribute();

                resourceAttribute.setResourceId(resource2.getId());

                resourceAttribute.setResourcePath(img2Path.toString());

                resourceAttribute.setFileName(img2Name);

                resourceAttribute.setAttachment(false);

                resourceAttribute.setThumbnail(false);



                resourceMapper.insertResourceAttribute(resourceAttribute);



                // 용량 업데이트

                userMapper.addUserUploadedByUserId(user.getId(), resourceSizeValues[2]);

            }

            

            // img 3

            afterUSN = synoIndexService.getAfterUSN(user.getId(), EntryType.RESOURCE_UPDATE.getType());



            Resource resource3 = new Resource();

            resource3.setGuid(UUID.randomUUID().toString());

            resource3.setNoteId(note.getId());

            resource3.setHash(resourceHashValues[3]);

            resource3.setSize(resourceSizeValues[3]);

            resource3.setMime("image/jpeg");

            resource3.setWidth(600);

            resource3.setHeight(420);

            resource3.setUpdateSequenceNumber(afterUSN);



            affectedRow = resourceMapper.insertResource(resource3);



            if (affectedRow == 1) {



                ResourceAttribute resourceAttribute = new ResourceAttribute();

                resourceAttribute.setResourceId(resource3.getId());

                resourceAttribute.setResourcePath(img3Path.toString());

                resourceAttribute.setFileName(img3Name);

                resourceAttribute.setAttachment(false);

                resourceAttribute.setThumbnail(false);



                resourceMapper.insertResourceAttribute(resourceAttribute);



                // 용량 업데이트

                userMapper.addUserUploadedByUserId(user.getId(), resourceSizeValues[3]);

            }

            

            // img 4

            afterUSN = synoIndexService.getAfterUSN(user.getId(), EntryType.RESOURCE_UPDATE.getType());



            Resource resource4 = new Resource();

            resource4.setGuid(UUID.randomUUID().toString());

            resource4.setNoteId(note.getId());

            resource4.setHash(resourceHashValues[4]);

            resource4.setSize(resourceSizeValues[4]);

            resource4.setMime("image/jpeg");

            resource4.setWidth(600);

            resource4.setHeight(330);

            resource4.setUpdateSequenceNumber(afterUSN);



            affectedRow = resourceMapper.insertResource(resource4);



            if (affectedRow == 1) {



                ResourceAttribute resourceAttribute = new ResourceAttribute();

                resourceAttribute.setResourceId(resource4.getId());

                resourceAttribute.setResourcePath(img4Path.toString());

                resourceAttribute.setFileName(img4Name);

                resourceAttribute.setAttachment(false);

                resourceAttribute.setThumbnail(false);



                resourceMapper.insertResourceAttribute(resourceAttribute);



                // 용량 업데이트

                userMapper.addUserUploadedByUserId(user.getId(), resourceSizeValues[4]);

            }



            // 리소스 업로드

            StringBuilder resourcePath = new StringBuilder();

            resourcePath.append(this.getClass().getResource("/").getPath());

            resourcePath.append("../");

            resourcePath.append("resources/images/");

            resourcePath.append(folderName);



            String bucketName = bucketMapper.selectBucketById(user.getBucketId()).getName();



            File thumbFile = new File(resourcePath.toString() + "1p_thumb.jpg");

            AmazonS3FileService.saveAttachFileToAmazon(bucketName, imgThumbPath.toString(), thumbFile);



            File img1File = new File(resourcePath.toString() + "1p_1.jpg");

            AmazonS3FileService.saveAttachFileToAmazon(bucketName, img1Path.toString(), img1File);

            

            File img2File = new File(resourcePath.toString() + "1p_2.jpg");

            AmazonS3FileService.saveAttachFileToAmazon(bucketName, img2Path.toString(), img2File);

            

            File img3File = new File(resourcePath.toString() + "1p_3.jpg");

            AmazonS3FileService.saveAttachFileToAmazon(bucketName, img3Path.toString(), img3File);

            

            File img4File = new File(resourcePath.toString() + "1p_4.jpg");

            AmazonS3FileService.saveAttachFileToAmazon(bucketName, img4Path.toString(), img4File);



        } else {

            throw new ResourceNotFoundException(null, "initNote");

        }

    }

